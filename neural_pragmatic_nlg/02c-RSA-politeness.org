#+title:     Sheet 1.2: RSA with politeness

This is a (numpy-based) Python implementation of an RSA model with a speaker who has two weighted objectives:
(i) being informative about the true world state and
(ii) being polite.
The latter is taken to mean that the speaker wants to increase the listener's degrees of beliefs in particular world states even if they are not true.

The same model is also covered in [[http://www.problang.org/chapters/09-politeness.html][chapter 9 of problang.org]] (Scontras et. al 2018).
The model covered here is essentially that of [[http://langcog.stanford.edu/papers_new/yoon-2016-cogsci.pdf][Yoon et al. (2016)]].

* Packages & helper functions

We use the same kinds of packages as before.

#+begin_src jupyter-python :session py :tangle yes
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
#+end_src

Also, we use the same helper functions as in Sheet 1.1 for computing soft-max and normalization of array dimensions.

#+begin_src jupyter-python :session py :tangle yes

##################################################
## helper functions
##################################################

def softmax(x, axis=1):
    """
    Softmax function in numpy
    Parameters
    ----------
    x: array
        An array with any dimensionality
    axis: int
        The axis along which to apply the softmax
    Returns
    -------
    array
        Same shape as x
    """
    e_x = np.exp(x - np.max(x, axis, keepdims=True))
    return e_x / e_x.sum(axis=axis, keepdims=True)


def normalize(arr, axis=1):
    """
    Normalize arr along axis
    """
    return arr / arr.sum(axis, keepdims=True)
#+end_src

* Running example

As a running example, we consider a context in which the speaker reports on their impression of the quality of the listener's self-baked cookies.

We assume that there are five world states, represented as increasing integers.
These numbers represent the true quality of the cookies (as perceived by the speaker).

We also assume that there are five expressions the speaker might want to use to report their quality assessment.
The semantic meaning we use for these expressions is a "soft-semantics" (truth-values are not confined to 0 and 1), which are derived from an experiment designed to elicit participants intuitions about the relevant semantic meanings ([[http://langcog.stanford.edu/papers_new/yoon-2016-cogsci.pdf][Yoon et al. 2016]]).


#+begin_src jupyter-python :session py :tangle yes

##################################################
## defining the context
##################################################

states     = [1,2,3,4,5]
utterances = ["terrible","bad","okay","good","amazing"]

semantic_meaning = np.array(
    [[.95 ,.85 ,.02 ,.02,.02],    # terrible
     [.85 ,.95 ,.02 ,.02,.02],    # bad
     [.02 ,.25 ,.95 ,.65,.35],    # okay
     [.02 ,.05 ,.55 ,.95,.93],    # good
     [.02 ,.02 ,.02 ,.65,.95]]    # amazing
)

#+end_src

> <strong><span style="color:#D83D2B;">Exercise 1.2.1: Check experiment and your intuitions</span></strong>
>
> 1. Consult the original paper ([[http://langcog.stanford.edu/papers_new/yoon-2016-cogsci.pdf][Yoon et al. 2016]]) to find the description of the experiment that was used to get these semantic values. Describe this experiment in at most three simple sentences: what was the question participants had to answer and how were answers recorded?
> 2. Comment on whether you find the obtained values intuitive as values of the semantic meaning of these expression.
> 3. Do you think that the experiment was well-designed for the task of eliciting information about semantic meaning of expressions?

* The model and its parameters

* Model definition

#+begin_src jupyter-python :session py :tangle yes

##################################################
## model parameters
##################################################

alpha        = 10
phi          = 0.99
social_value = 1.25

##################################################
## RSA speaker with politeness
##################################################

def RSA_polite_speaker(alpha, phi, social_value):
    """
    predictions of an RSA model with politeness (speaker part)
    (following: http://www.problang.org/chapters/09-politeness.html)
    Parameters
    ----------
    alpha: float
        Optimality parameter
    phi: float
        Relative weight of epistemic utility component
    social_value: float
        Social value factor (how much more "socially valuable" is one more star?)
    Returns
    -------
    array
        probability that speaker chooses utterance for each state
    """
    literal_listener   = normalize(semantic_meaning)
    epistemic_utility  = np.log(np.transpose(literal_listener))
    social_utility     = np.sum(literal_listener * np.array([states]) * social_value, axis=1)
    util_speaker       = phi * epistemic_utility + (1-phi) * social_utility
    pragmatic_speaker  = softmax(alpha * util_speaker)
    return(pragmatic_speaker)

RSA_speaker_predictions = RSA_polite_speaker(alpha, phi, social_value)

speaker  = pd.DataFrame(data    = RSA_speaker_predictions,
                        index   = states,
                        columns = utterances)
speaker['object'] = speaker.index

print(speaker.round(2))

speaker_long = speaker.melt(id_vars      = "object",
                            var_name     = "utterance",
                            value_name   = "probability",
                            ignore_index = False)
speaker_plot = sns.FacetGrid(speaker_long, col="object")
speaker_plot.map(sns.barplot, "utterance", "probability")
plt.show()

# Exercises:
# - Change the call to the speaker to make it so that it only cares about making the listener feel good.
# - Change the call to the speaker to make it so that it cares about both making the listener feel good and conveying information.
# - Change the value of the social_value and examine the results.

##################################################
## pragmatic listener infers politeness level
##################################################

# which phi-values to consider
phi_marks     = np.linspace(start=0, stop=1, num=11)
phi_prior_flt = np.array([1,1,1,1,1,1,1,1,1,1,1])   # flat
phi_prior_bsd = np.array([1,2,3,4,5,6,7,8,9,10,11]) # biased towards politeness

def RSA_polite_listener(alpha, phi_prior, social_value):
    """
    predictions of an RSA model with politeness (listener part)
    (following: http://www.problang.org/chapters/09-politeness.html)
    Parameters
    ----------
    alpha: float
        Optimality parameter
    phi_priors: float
        Prior over degree of politeness (phi-parameter)
    social_value: float
        Social value factor (how much more "socially valuable" is one more star?)
    Returns
    -------
    array
         for each message: listener posterior over state-phi pairs
    """
    phi_prior = phi_prior / np.sum(phi_prior) # make sure priors are normalized
    posterior = np.zeros((len(phi_marks), len(utterances),len(states)))
    for i in range(len(phi_marks)):
        pragmatic_speaker  = RSA_polite_speaker(alpha, phi_marks[i], social_value)
        posterior[i,:,:]   = np.transpose(pragmatic_speaker) * phi_prior[i]
    return(normalize(posterior, axis=(0,1)))

RSA_listener_predictions = RSA_polite_listener(alpha, phi_prior_flt, social_value)

print("listener posterior over states after hearing 'amazing':\n",
      np.sum(RSA_listener_predictions[:,:,4], axis=0))

# TODO: why are the values numerically slightly off wrt to the WebPPL implementation?
# TODO: cast the 3D array into DataFrame for plotting

iterables=[phi_marks, utterances, states]
index = pd.MultiIndex.from_product(iterables, names=['phi','utterance','state'])

listener = pd.DataFrame(RSA_listener_predictions.reshape(RSA_listener_predictions.size, 1),
                        index=index)
listener = listener.reset_index()

##################################################
## plotting the results
##################################################

def plot_listener(utterance_index):
    print("plotting listener posterior for utterance:", utterances[utterance_index])
    predictions = RSA_listener_predictions[:,utterance_index,:]
    sns.heatmap(predictions)
    plt.show()

plot_listener(3)

# Exercises:
# 1. Use the plotting function for different indeces (0-4). What is plotted here?
#    What's on the x-axis, the y-axis, and what do the colors mean?
# 2. Plot the results for the utterance "good". Describe the result in your own words.
#    Comment on whether this makes sense to you, i.e., is the result an intuitive / natural
#    interpretation of such an utterance (in the context we assume here)?
#
# [Q: does only the ordering or also the equally-spaced distance matter to the model?]

#+end_src

* References

Scontras, G., Tessler, M. H., & Franke, M. (2018). [[http://www.problang.org][Probabilistic language understanding: An introduction to the Rational Speech Act framework]].

Yoon, E. J., Tessler, M. H., Goodman, N. D., & Frank, M. C. (2016). [[http://langcog.stanford.edu/papers_new/yoon-2016-cogsci.pdf][Talking with tact: polite language as a balance between kindness and informativity]]. In: /Proceedings of CogSci/ 38.
